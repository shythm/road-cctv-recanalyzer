// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { StreamReadAllError, StreamReadAllResponse, StreamCreateData, StreamCreateError, StreamCreateResponse, StreamDeleteData, StreamDeleteError, StreamDeleteResponse, TaskRecordReadAllError, TaskRecordReadAllResponse, TaskRecordStartData, TaskRecordStartError, TaskRecordStartResponse, TaskRecordStopData, TaskRecordStopError, TaskRecordStopResponse, TaskRecordDeleteData, TaskRecordDeleteError, TaskRecordDeleteResponse, TaskTrackingReadAllError, TaskTrackingReadAllResponse, TaskTrackingStartData, TaskTrackingStartError, TaskTrackingStartResponse, TaskTrackingStopData, TaskTrackingStopError, TaskTrackingStopResponse, TaskTrackingDeleteData, TaskTrackingDeleteError, TaskTrackingDeleteResponse, OutputReadAllError, OutputReadAllResponse, OutputReadData, OutputReadError, OutputReadResponse, OutputDeleteData, OutputDeleteError, OutputDeleteResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Read All
 */
export const streamReadAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<StreamReadAllResponse, StreamReadAllError, ThrowOnError>({
    ...options,
    url: '/stream'
}); };

/**
 * Create
 */
export const streamCreate = <ThrowOnError extends boolean = false>(options: Options<StreamCreateData, ThrowOnError>) => { return (options?.client ?? client).post<StreamCreateResponse, StreamCreateError, ThrowOnError>({
    ...options,
    url: '/stream'
}); };

/**
 * Delete
 */
export const streamDelete = <ThrowOnError extends boolean = false>(options: Options<StreamDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<StreamDeleteResponse, StreamDeleteError, ThrowOnError>({
    ...options,
    url: '/stream/{cctvname}'
}); };

/**
 * Read All
 */
export const taskRecordReadAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<TaskRecordReadAllResponse, TaskRecordReadAllError, ThrowOnError>({
    ...options,
    url: '/task/record'
}); };

/**
 * Start
 */
export const taskRecordStart = <ThrowOnError extends boolean = false>(options: Options<TaskRecordStartData, ThrowOnError>) => { return (options?.client ?? client).post<TaskRecordStartResponse, TaskRecordStartError, ThrowOnError>({
    ...options,
    url: '/task/record/start'
}); };

/**
 * Stop
 */
export const taskRecordStop = <ThrowOnError extends boolean = false>(options: Options<TaskRecordStopData, ThrowOnError>) => { return (options?.client ?? client).post<TaskRecordStopResponse, TaskRecordStopError, ThrowOnError>({
    ...options,
    url: '/task/record/stop/{taskid}'
}); };

/**
 * Delete
 */
export const taskRecordDelete = <ThrowOnError extends boolean = false>(options: Options<TaskRecordDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<TaskRecordDeleteResponse, TaskRecordDeleteError, ThrowOnError>({
    ...options,
    url: '/task/record/{taskid}'
}); };

/**
 * Read All
 */
export const taskTrackingReadAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<TaskTrackingReadAllResponse, TaskTrackingReadAllError, ThrowOnError>({
    ...options,
    url: '/task/tracking'
}); };

/**
 * Start
 */
export const taskTrackingStart = <ThrowOnError extends boolean = false>(options: Options<TaskTrackingStartData, ThrowOnError>) => { return (options?.client ?? client).post<TaskTrackingStartResponse, TaskTrackingStartError, ThrowOnError>({
    ...options,
    url: '/task/tracking/start'
}); };

/**
 * Stop
 */
export const taskTrackingStop = <ThrowOnError extends boolean = false>(options: Options<TaskTrackingStopData, ThrowOnError>) => { return (options?.client ?? client).post<TaskTrackingStopResponse, TaskTrackingStopError, ThrowOnError>({
    ...options,
    url: '/task/tracking/stop/{taskid}'
}); };

/**
 * Delete
 */
export const taskTrackingDelete = <ThrowOnError extends boolean = false>(options: Options<TaskTrackingDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<TaskTrackingDeleteResponse, TaskTrackingDeleteError, ThrowOnError>({
    ...options,
    url: '/task/tracking/{taskid}'
}); };

/**
 * Read All
 */
export const outputReadAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<OutputReadAllResponse, OutputReadAllError, ThrowOnError>({
    ...options,
    url: '/output'
}); };

/**
 * Read
 */
export const outputRead = <ThrowOnError extends boolean = false>(options: Options<OutputReadData, ThrowOnError>) => { return (options?.client ?? client).get<OutputReadResponse, OutputReadError, ThrowOnError>({
    ...options,
    url: '/output/{taskid}'
}); };

/**
 * Delete
 */
export const outputDelete = <ThrowOnError extends boolean = false>(options: Options<OutputDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<OutputDeleteResponse, OutputDeleteError, ThrowOnError>({
    ...options,
    url: '/output/{taskid}'
}); };